def virtualEnv(cmd) {
  sh "virtualenv . && source ./bin/activate && ./bin/pip install -r requirements.txt && ${cmd}"
}

pipeline {
  agent any
  stages {
    stage('Clean/Setup') {
      steps {
        sh 'git clean -ffdx'
        sh 'make clean'
      }
    }
    stage('Build/Test') {
      stage('Build') { steps { virtualEnv('make -j 16') } }
      stage('Test')  { steps { virtualEnv('make testcover') } }
      stage('Lint')  { steps { sh '(pylint --rcfile=.pylintrc recepmod > pylint.log || echo "pylint exited with $?")' } }
    }
    stage('Report') {
      steps {
        archiveArtifacts artifacts: 'Manuscript/Manuscript.pdf', onlyIfSuccessful: true
        archiveArtifacts artifacts: 'Manuscript/Manuscript.docx', onlyIfSuccessful: true
        archiveArtifacts artifacts: 'Manuscript/ReviewResponse.pdf', onlyIfSuccessful: true
        archiveArtifacts artifacts: 'Manuscript/ReviewResponse.docx', onlyIfSuccessful: true
        archiveArtifacts artifacts: 'Manuscript/Manuscript.log', onlyIfSuccessful: false
        archiveArtifacts artifacts: 'Manuscript/Figures/Figure*.pdf', onlyIfSuccessful: false

        publishHTML([
          allowMissing: false,
          alwaysLinkToLastBuild: false,
          keepAll: false,
          reportDir: 'Manuscript',
          reportFiles: 'index.html',
          reportName: 'Manuscript',
          reportTitles: ''])

        step([
          $class                     : 'WarningsPublisher',
          parserConfigurations       : [[
          parserName: 'PYLint',
          pattern   : 'pylint.log'
          ]],
          unstableTotalAll           : '1000',
          usePreviousBuildAsReference: true
          ])

        step([
          $class: 'CoberturaPublisher',
          autoUpdateHealth: true,
          autoUpdateStability: true,
          coberturaReportFile: 'coverage.xml',
          failNoReports: true,
          failUnhealthy: true,
          failUnstable: true,
          sourceEncoding: 'UTF_8',
          zoomCoverageChart: true])

        step([
          $class: 'TasksPublisher',
          canComputeNew: false,
          defaultEncoding: '', 
          excludePattern: '',
          healthy: '',
          high: 'TODO,FIXME,XXX',
          low: '',
          normal: 'CITE',
          pattern: '**/*.py, **/*.md',
          unHealthy: ''])
      }
    }
  }
}
