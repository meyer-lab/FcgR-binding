pipeline {
  agent { label 'docker' }
  options {
    timeout(time: 1, unit: 'HOURS')
    parallelsAlwaysFailFast()
  }
  stages {
    stage('Clean/Setup') { steps { sh 'git clean -ffdx && make clean' } }
    stage('Lint')  {
      steps {
        sh '(pylint --rcfile=.pylintrc recepmod > pylint.log || echo "pylint exited with $?")'
        recordIssues qualityGates: [[threshold: 15, type: 'TOTAL', unstable: true]], tools: [pyLint(pattern: 'pylint.log')]
      }
    }
    stage('Test')  {
      steps {
        sh 'make testcover'
        junit allowEmptyResults: false, testResults: 'junit.xml'
        cobertura coberturaReportFile: 'coverage.xml', failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
      }
    }
    stage('Build') { steps { sh 'make -j 16' } }
    stage('Report') {
      steps {
        archiveArtifacts artifacts: 'Manuscript/Manuscript.pdf', onlyIfSuccessful: true
        archiveArtifacts artifacts: 'Manuscript/Manuscript.docx', onlyIfSuccessful: true
        archiveArtifacts artifacts: 'Manuscript/ReviewResponse.docx', onlyIfSuccessful: true
        archiveArtifacts artifacts: 'Manuscript/Manuscript.log', onlyIfSuccessful: false
        archiveArtifacts artifacts: 'Manuscript/Figures/Figure*.pdf', onlyIfSuccessful: false

        publishHTML([
          allowMissing: false,
          alwaysLinkToLastBuild: false,
          keepAll: false,
          reportDir: 'Manuscript',
          reportFiles: 'index.html',
          reportName: 'Manuscript',
          reportTitles: ''])

        step([
          $class: 'TasksPublisher',
          canComputeNew: false,
          defaultEncoding: '', 
          excludePattern: 'lib/python3.6/**',
          healthy: '',
          high: 'TODO,FIXME,XXX',
          low: '',
          normal: 'CITE',
          pattern: '**/*.py, **/*.md',
          unHealthy: ''])
      }
    }
  }
}
