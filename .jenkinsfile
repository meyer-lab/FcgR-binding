pipeline {
  agent any
  environment {
    PATH = "/bin:/usr/sbin:/usr/bin:/usr/local/bin:/usr/local/texlive/2017/bin/x86_64-darwin/"
    LC_CTYPE = "en_US.UTF-8"
  }
  stages {
    stage('Clean') {
      steps {
        sh 'make clean'

        step([
          $class: 'TasksPublisher',
          canComputeNew: false,
          defaultEncoding: '', 
          excludePattern: '',
          healthy: '',
          high: 'TODO,FIXME,XXX',
          low: '',
          normal: 'CITE',
          pattern: '**/*.py, **/*.md',
          unHealthy: ''])
      }
    }
    stage('Build') {
      steps { sh 'make -j 8' }
    }
    stage('Test'){
      steps {
        sh 'make testcover'
        sh '(pylint --rcfile=.pylintrc recepmod > pylint.log || echo "pylint exited with $?")'

        step([
          $class                     : 'WarningsPublisher',
          parserConfigurations       : [[
          parserName: 'PYLint',
          pattern   : 'pylint.log'
          ]],
          unstableTotalAll           : '1000',
          usePreviousBuildAsReference: true
          ])

        step([
          $class: 'CoberturaPublisher',
          autoUpdateHealth: true,
          autoUpdateStability: true,
          coberturaReportFile: 'coverage.xml',
          failNoReports: true,
          failUnhealthy: true,
          failUnstable: true,
          sourceEncoding: 'UTF_8',
          zoomCoverageChart: true])

        publishHTML([
          allowMissing: false,
          alwaysLinkToLastBuild: false,
          keepAll: false,
          reportDir: 'Manuscript',
          reportFiles: 'index.html',
          reportName: 'Manuscript',
          reportTitles: ''])
      }
    }
    stage('Deploy') {
      when {
        expression { env.BRANCH_NAME == 'master' }
      }
      steps {
        sh 'make upload'
        archiveArtifacts artifacts: 'Manuscript/Manuscript.pdf', onlyIfSuccessful: true
      }
    }
  }
}
