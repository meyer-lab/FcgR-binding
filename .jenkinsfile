pipeline {
  agent any
  environment {
    PATH = "/bin:/usr/sbin:/usr/bin:/usr/local/bin"
  }
  stages {
    stage('Build') {
      steps {
        sh 'make clean'
        sh 'make'
      }
    }
    stage('Test'){
      steps {
        sh 'coverage run -m unittest discover'
        //sh 'coverage xml -o coverage.xml --omit=/usr/local/lib/*'
        //sh 'mkdir -p ./report'
        //sh 'cobertura-clover-transform coverage.xml > ./report/clover.xml'

        sh '(pylint --rcfile=.pylintrc recepmod > pylint.log || echo "pylint exited with $?")'

        //step([$class: 'CloverPublisher', cloverReportDir: 'report', cloverReportFileName: 'clover.xml'])

        step([
          $class                     : 'WarningsPublisher',
          parserConfigurations       : [[
          parserName: 'PYLint',
          pattern   : 'pylint.log'
          ]],
          unstableTotalAll           : '1000',
          usePreviousBuildAsReference: true
          ])
      }
    }
    stage('Deploy') {
      steps {
        sh 'make upload'
      }
    }
  }
}
